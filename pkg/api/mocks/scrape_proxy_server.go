// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/levelitta/scrape_proxy/pkg/api"

	mock "github.com/stretchr/testify/mock"
)

// ScrapeProxyServer is an autogenerated mock type for the ScrapeProxyServer type
type ScrapeProxyServer struct {
	mock.Mock
}

type ScrapeProxyServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ScrapeProxyServer) EXPECT() *ScrapeProxyServer_Expecter {
	return &ScrapeProxyServer_Expecter{mock: &_m.Mock}
}

// SendRequest provides a mock function with given fields: _a0, _a1
func (_m *ScrapeProxyServer) SendRequest(_a0 context.Context, _a1 *api.Request) (*api.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.Request) (*api.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.Request) *api.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScrapeProxyServer_SendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRequest'
type ScrapeProxyServer_SendRequest_Call struct {
	*mock.Call
}

// SendRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *api.Request
func (_e *ScrapeProxyServer_Expecter) SendRequest(_a0 interface{}, _a1 interface{}) *ScrapeProxyServer_SendRequest_Call {
	return &ScrapeProxyServer_SendRequest_Call{Call: _e.mock.On("SendRequest", _a0, _a1)}
}

func (_c *ScrapeProxyServer_SendRequest_Call) Run(run func(_a0 context.Context, _a1 *api.Request)) *ScrapeProxyServer_SendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.Request))
	})
	return _c
}

func (_c *ScrapeProxyServer_SendRequest_Call) Return(_a0 *api.Response, _a1 error) *ScrapeProxyServer_SendRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScrapeProxyServer_SendRequest_Call) RunAndReturn(run func(context.Context, *api.Request) (*api.Response, error)) *ScrapeProxyServer_SendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedScrapeProxyServer provides a mock function with given fields:
func (_m *ScrapeProxyServer) mustEmbedUnimplementedScrapeProxyServer() {
	_m.Called()
}

// ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedScrapeProxyServer'
type ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedScrapeProxyServer is a helper method to define mock.On call
func (_e *ScrapeProxyServer_Expecter) mustEmbedUnimplementedScrapeProxyServer() *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call {
	return &ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call{Call: _e.mock.On("mustEmbedUnimplementedScrapeProxyServer")}
}

func (_c *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call) Run(run func()) *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call) Return() *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call) RunAndReturn(run func()) *ScrapeProxyServer_mustEmbedUnimplementedScrapeProxyServer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewScrapeProxyServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewScrapeProxyServer creates a new instance of ScrapeProxyServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScrapeProxyServer(t mockConstructorTestingTNewScrapeProxyServer) *ScrapeProxyServer {
	mock := &ScrapeProxyServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
